name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

defaults:
  run:
    shell: bash
    working-directory: baemin

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Show tree
        run: |
          pwd
          ls -al
          find . -maxdepth 2 -name gradlew -o -name 'build.gradle*'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew clean build -x test

      - name: Pick JAR & rename
        id: pick
        run: |
          JAR=$(ls build/libs/*.jar | grep -v '\-plain\.jar' | head -n 1 || true)
          if [ -z "$JAR" ]; then
            echo "JAR not found"; exit 1
          fi
          cp "$JAR" app.jar
          echo "jar_path=app.jar" >> "$GITHUB_OUTPUT"

      - name: Save SSH key
        run: |
          printf "%s" "$EC2_KEY" > key.pem
          chmod 600 key.pem
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}

      - name: Upload JAR
        run: |
          scp -o StrictHostKeyChecking=no -i key.pem "${{ steps.pick.outputs.jar_path }}" \
            "${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app.jar"

      - name: Inject AWS env to systemd (optional)
        run: |
          if [ -n "${AWS_ACCESS_KEY_ID}" ] && [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then
            ssh -o StrictHostKeyChecking=no -i key.pem "${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}" "\
              set -euo pipefail; \
              sudo mkdir -p /etc/systemd/system/${{ secrets.SERVICE_NAME }}.service.d && \
              sudo bash -c 'cat > /etc/systemd/system/${{ secrets.SERVICE_NAME }}.service.d/override.conf' <<'EOF'
            [Service]
            Environment=\"AWS_REGION=${AWS_REGION}\"
            Environment=\"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\"
            Environment=\"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\"
            EOF
            sudo systemctl daemon-reload
            "
          else
            echo "AWS creds not provided via Secrets. Skipping systemd env injection."
          fi

      - name: Move & restart service
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem "${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}" "\
            set -euo pipefail; \
            sudo mkdir -p '${{ secrets.EC2_PATH }}' && \
            sudo mv -f ~/app.jar '${{ secrets.EC2_PATH }}/app.jar' && \
            sudo chown app:app '${{ secrets.EC2_PATH }}/app.jar' && \
            sudo systemctl restart '${{ secrets.SERVICE_NAME }}' && \
            sudo systemctl status '${{ secrets.SERVICE_NAME }}' --no-pager -l || \
            journalctl -u '${{ secrets.SERVICE_NAME }}' -n 200 --no-pager \
          "
